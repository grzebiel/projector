#!/bin/bash

APP=${0##*/};
DB_DIR="$HOME/.prj"

print_usage() {
    echo
    if [ $# -eq 0 ]
    then
        echo -e "  usage: $APP [--version] [--help]"
        echo -e "              <command> [<args>]"
        echo
        echo -e "  available commands:"
        echo -e "     list       lists all added projects"
        echo -e "     init       add the project into the projector"
        echo -e "     cd         open project"
        echo
        echo -e "  available options:"
        echo -e "     --version     prints the version number"
        echo -e "     --db_dir   specifies the directory to treat as database"
    else
        case $1 in
            cd)
                echo -e "  usage: $APP cd [project]"
                echo -e "     project      name of the project to oppen"
            ;;
            list)
                echo -e "  usage: $APP list [<options>]"
                echo -e "     -q           list only project names"
            ;;
            init)
                echo -e "  usage: $APP init [<options>]"
                echo -e "     -n, --name   name of the project, default: current dirname"
            ;;
            *)
                echo -e "unknown command $1"
                exit 1
            ;;
        esac
    fi
    echo
}

init_project() {
    local NAME=$1
    shift
    local PRJ_DIR=$1
    shift

    PRJ_DB_DIR="$DB_DIR/$NAME"
    mkdir "$PRJ_DB_DIR"
    echo "$PRJ_DIR" > "$PRJ_DB_DIR/pwd"
    echo added project $NAME with pwd $PRJ_DIR
}


list_projects() {

    while [ $# -gt 0 ]
    do
        case $1 in
            -q)
                shift
                ls $DB_DIR | xargs
                exit
            ;;
            *)
                echo "unknown parameters! $1"
                print_usage list
                exit 1
            ;;
        esac
    done


    ls $DB_DIR | while read DIR
    do
        local path=$(cat "$DB_DIR/$DIR/pwd")
        echo -e $DIR,$path
    done | column -s ',' -t
}

open_project() {
    local name=$1
    shift

    PRJ_DB_DIR="$DB_DIR/$name"

    if [ ! -d $PRJ_DB_DIR ]
    then
        echo no project $name
        echo
        print_usage
        exit 2
    fi
    local pwd=$(cat "$PRJ_DB_DIR/pwd")
    rcfile=$(realpath $DB_DIR/.bashrc)
    cd $pwd
    PROJECTOR_PWD="$pwd" PROJECTOR_NAME="$name" exec bash --rcfile "$rcfile"
}

init() {
    if [ ! -d "$DB_DIR" ];
    then
        echo created db $DB_DIR
        mkdir -p $DB_DIR
    fi

    if [ ! -f "$DB_DIR/.bashrc" ]
    then
        echo created .bashrc in $DB_DIR
        cat > $DB_DIR/.bashrc << EOF
if [ -f ~/.bashrc ]
then
    source ~/.bashrc
fi

PS1="{\$PROJECTOR_NAME}|\$PS1"
echo you've entered project \$PROJECTOR_NAME env. use C-d to leave it.
EOF
    fi
}

if [ $# -eq 0 ]
then
    echo "No args given, nothing to do"
    echo
    print_usage
    exit 1
fi

NAME="${PWD##*/}" #getting the name of top level directory

while [ $# -gt 0 ]; do
    case $1 in
        cd)
            shift
            init
            if [ ! -z ${PROJECTOR_NAME+x} ]
            then
                echo you are already in the projector environment. Leave it first using \<C-d\> or exit command
                exit 1
            fi
            if [ ! $# -eq 1 ]
            then
                echo "No project given"
                echo
                print_usage cd
                exit 1
            fi
            open_project $1
            shift
            exit
        ;;
        list)
            shift
            init
            list_projects $@
            exit
        ;;
        init)
            shift
            init
            while [ $# -gt 0 ]
            do
                case $1 in
                    -n|--name)
                        shift
                        if [ $# -lt 1 ]
                        then
                            echo "missing name parameter"
                            print_usage add
                            exit 1
                        fi
                        NAME="$1"
                        shift
                    ;;
                    -v|--version)
                        shift
                    ;;
                    *)
                        echo "unknown parameters! $@"
                        print_usage add
                        exit 1
                    ;;
                esac
            done
            init_project "$NAME" "$PWD"
        ;;
        help|--help|-h)
            shift
            print_usage $@
            exit
        ;;
        --db_dir)
            shift
            DB_DIR=$1
            shift
        ;;
        *)
            echo "unknown command $@"
            print_usage
            exit 1
        ;;
    esac
done
